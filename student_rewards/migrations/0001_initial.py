# Generated by Django 5.2.5 on 2025-08-08 01:18

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('profiles', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='DiscountTier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Name of the discount tier (e.g., 'Bronze', 'Silver', 'Gold')", max_length=100)),
                ('min_points', models.IntegerField(help_text='Minimum points required to access this tier')),
                ('percent_off', models.DecimalField(decimal_places=2, help_text='Percentage discount offered (e.g., 10.00 for 10%)', max_digits=5)),
                ('description', models.TextField(help_text='Description of the discount tier benefits')),
                ('active', models.BooleanField(default=True, help_text='Whether this discount tier is currently active')),
                ('max_uses_per_student', models.IntegerField(default=1, help_text='Maximum times a student can use this discount tier')),
                ('valid_from', models.DateTimeField(default=django.utils.timezone.now, help_text='When this discount tier becomes valid')),
                ('valid_until', models.DateTimeField(blank=True, help_text='When this discount tier expires (null for no expiry)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Discount Tier',
                'verbose_name_plural': 'Discount Tiers',
                'db_table': 'student_rewards_discounttier',
                'ordering': ['min_points'],
                'indexes': [models.Index(fields=['active', 'min_points'], name='student_rew_active_4ae559_idx'), models.Index(fields=['valid_from', 'valid_until'], name='student_rew_valid_f_477df3_idx')],
            },
        ),
        migrations.CreateModel(
            name='StudentProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_number', models.CharField(help_text='South African ID number or passport number', max_length=20, unique=True)),
                ('university', models.CharField(help_text='Name of the university or educational institution', max_length=200)),
                ('verified', models.BooleanField(default=False, help_text="Whether the student's information has been verified")),
                ('total_points', models.IntegerField(default=0, help_text='Total points earned by the student over all time')),
                ('current_points', models.IntegerField(default=0, help_text='Current available points balance')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user_profile', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student_profile', to='profiles.userprofile')),
            ],
            options={
                'verbose_name': 'Student Profile',
                'verbose_name_plural': 'Student Profiles',
                'db_table': 'student_rewards_studentprofile',
            },
        ),
        migrations.CreateModel(
            name='RedeemedDiscount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_reference', models.CharField(blank=True, help_text='Reference to order where discount was applied (null if not used yet)', max_length=100, null=True)),
                ('redeemed_at', models.DateTimeField(auto_now_add=True, help_text='When the discount was redeemed')),
                ('expires_at', models.DateTimeField(help_text='When the redeemed discount expires')),
                ('used_at', models.DateTimeField(blank=True, help_text='When the discount was actually used in an order', null=True)),
                ('discount_code', models.CharField(help_text='Unique code for the redeemed discount', max_length=50, unique=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether the discount is still active and can be used')),
                ('discount_tier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='redemptions', to='student_rewards.discounttier')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='redeemed_discounts', to='student_rewards.studentprofile')),
            ],
            options={
                'verbose_name': 'Redeemed Discount',
                'verbose_name_plural': 'Redeemed Discounts',
                'db_table': 'student_rewards_redeemeddiscount',
                'ordering': ['-redeemed_at'],
            },
        ),
        migrations.CreateModel(
            name='PointsTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_reference', models.CharField(blank=True, help_text='Reference to order or activity that generated points', max_length=100, null=True)),
                ('activity_reference', models.CharField(blank=True, help_text='Reference to specific activity that generated points', max_length=100, null=True)),
                ('points_delta', models.IntegerField(help_text='Points change (positive for earned, negative for spent)')),
                ('reason', models.CharField(help_text='Reason for the points transaction', max_length=200)),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='When the transaction occurred')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='points_transactions', to='student_rewards.studentprofile')),
            ],
            options={
                'verbose_name': 'Points Transaction',
                'verbose_name_plural': 'Points Transactions',
                'db_table': 'student_rewards_pointstransaction',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddIndex(
            model_name='studentprofile',
            index=models.Index(fields=['verified'], name='student_rew_verifie_a28e24_idx'),
        ),
        migrations.AddIndex(
            model_name='studentprofile',
            index=models.Index(fields=['university'], name='student_rew_univers_28f93d_idx'),
        ),
        migrations.AddIndex(
            model_name='studentprofile',
            index=models.Index(fields=['current_points'], name='student_rew_current_43f0b5_idx'),
        ),
        migrations.AddIndex(
            model_name='redeemeddiscount',
            index=models.Index(fields=['student', '-redeemed_at'], name='student_rew_student_fa8e9d_idx'),
        ),
        migrations.AddIndex(
            model_name='redeemeddiscount',
            index=models.Index(fields=['discount_code'], name='student_rew_discoun_c56b36_idx'),
        ),
        migrations.AddIndex(
            model_name='redeemeddiscount',
            index=models.Index(fields=['order_reference'], name='student_rew_order_r_e0a777_idx'),
        ),
        migrations.AddIndex(
            model_name='redeemeddiscount',
            index=models.Index(fields=['expires_at', 'is_active'], name='student_rew_expires_6ccb86_idx'),
        ),
        migrations.AddIndex(
            model_name='pointstransaction',
            index=models.Index(fields=['student', '-timestamp'], name='student_rew_student_1be1f8_idx'),
        ),
        migrations.AddIndex(
            model_name='pointstransaction',
            index=models.Index(fields=['order_reference'], name='student_rew_order_r_01bf3a_idx'),
        ),
        migrations.AddIndex(
            model_name='pointstransaction',
            index=models.Index(fields=['timestamp'], name='student_rew_timesta_388aca_idx'),
        ),
    ]
