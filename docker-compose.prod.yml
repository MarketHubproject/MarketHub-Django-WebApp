version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: markethub_prod
      POSTGRES_USER: markethub_user
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-secure_password_change_me}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - markethub_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U markethub_user -d markethub_prod"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-secure_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - markethub_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Django Web Application
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    environment:
      - DJANGO_ENVIRONMENT=production
      - DJANGO_SETTINGS_MODULE=markethub.settings.prod
      - SECRET_KEY=${SECRET_KEY:-generate_a_secure_secret_key}
      - DEBUG=False
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
      - DATABASE_ENGINE=django_postgrespool2
      - DATABASE_NAME=markethub_prod
      - DATABASE_USER=markethub_user
      - DATABASE_PASSWORD=${DATABASE_PASSWORD:-secure_password_change_me}
      - DATABASE_HOST=db
      - DATABASE_PORT=5432
      - DATABASE_MAX_CONNS=20
      - DATABASE_MIN_CONNS=5
      - REDIS_URL=redis://:${REDIS_PASSWORD:-secure_redis_password}@redis:6379/1
      - EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend
      - EMAIL_HOST=${EMAIL_HOST:-smtp.gmail.com}
      - EMAIL_PORT=${EMAIL_PORT:-587}
      - EMAIL_USE_TLS=True
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - STRIPE_PUBLISHABLE_KEY_LIVE=${STRIPE_PUBLISHABLE_KEY_LIVE}
      - STRIPE_SECRET_KEY_LIVE=${STRIPE_SECRET_KEY_LIVE}
      - STRIPE_WEBHOOK_SECRET_LIVE=${STRIPE_WEBHOOK_SECRET_LIVE}
      - PAYMENT_ENV=live
      - SENTRY_DSN=${SENTRY_DSN}
      - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS:-https://yourdomain.com}
      - API_BASE_URL=${API_BASE_URL:-https://yourdomain.com/api/}
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - logs_volume:/var/log/markethub
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - markethub_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Nginx Reverse Proxy (optional - for serving static files)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/usr/share/nginx/html/static:ro
      - media_volume:/usr/share/nginx/html/media:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    networks:
      - markethub_network
    restart: unless-stopped

  # Backup Service (optional)
  backup:
    image: postgres:15-alpine
    environment:
      PGPASSWORD: ${DATABASE_PASSWORD:-secure_password_change_me}
    volumes:
      - ./backups:/backups
      - postgres_data:/var/lib/postgresql/data:ro
    command: >
      sh -c "
        while true; do
          pg_dump -h db -U markethub_user -d markethub_prod > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
          # Keep only last 7 days of backups
          find /backups -name '*.sql' -mtime +7 -delete
          sleep 86400  # 24 hours
        done
      "
    depends_on:
      db:
        condition: service_healthy
    networks:
      - markethub_network
    restart: unless-stopped
    profiles:
      - backup

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  logs_volume:
    driver: local

networks:
  markethub_network:
    driver: bridge
