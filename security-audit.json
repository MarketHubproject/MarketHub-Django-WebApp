{"dependencies": [{"name": "aiohappyeyeballs", "version": "2.6.1", "vulns": []}, {"name": "aiohttp", "version": "3.9.1", "vulns": [{"id": "PYSEC-2024-24", "fix_versions": ["3.9.2"], "aliases": ["CVE-2024-23334", "GHSA-5h86-8mv2-jq9f"], "description": "aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. When using aiohttp as a web server and configuring static routes, it is necessary to specify the root path for static files. Additionally, the option 'follow_symlinks' can be used to determine whether to follow symbolic links outside the static root directory. When 'follow_symlinks' is set to True, there is no validation to check if reading a file is within the root directory. This can lead to directory traversal vulnerabilities, resulting in unauthorized access to arbitrary files on the system, even when symlinks are not present.  Disabling follow_symlinks and using a reverse proxy are encouraged mitigations.  Version 3.9.2 fixes this issue."}, {"id": "PYSEC-2024-26", "fix_versions": ["3.9.2"], "aliases": ["GHSA-8qpw-xqxj-h4r2", "CVE-2024-23829"], "description": "aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. Security-sensitive parts of the Python HTTP parser retained minor differences in allowable character sets, that must trigger error handling to robustly match frame boundaries of proxies in order to protect against injection of additional requests. Additionally, validation could trigger exceptions that were not handled consistently with processing of other malformed input.  Being more lenient than internet standards require could, depending on deployment environment, assist in request smuggling. The unhandled exception could cause excessive resource consumption on the application server and/or its logging facilities. This vulnerability exists due to an incomplete fix for CVE-2023-47627. Version 3.9.2 fixes this vulnerability."}, {"id": "GHSA-7gpw-8wmc-pm8g", "fix_versions": ["3.9.4"], "aliases": ["CVE-2024-27306"], "description": "### Summary  A XSS vulnerability exists on index pages for static file handling.  ### Details  When using `web.static(..., show_index=True)`, the resulting index pages do not escape file names.  If users can upload files with arbitrary filenames to the static directory, the server is vulnerable to XSS attacks.  ### Workaround  We have always recommended using a reverse proxy server (e.g. nginx) for serving static files. Users following the recommendation are unaffected.  Other users can disable `show_index` if unable to upgrade.  -----  Patch: https://github.com/aio-libs/aiohttp/pull/8319/files"}, {"id": "GHSA-5m98-qgg9-wh84", "fix_versions": ["3.9.4"], "aliases": ["CVE-2024-30251"], "description": "### Summary An attacker can send a specially crafted POST (multipart/form-data) request. When the aiohttp server processes it, the server will enter an infinite loop and be unable to process any further requests.  ### Impact An attacker can stop the application from serving requests after sending a single request.  -------  For anyone needing to patch older versions of aiohttp, the minimum diff needed to resolve the issue is (located in `_read_chunk_from_length()`):  ```diff diff --git a/aiohttp/multipart.py b/aiohttp/multipart.py index 227be605c..71fc2654a 100644 --- a/aiohttp/multipart.py +++ b/aiohttp/multipart.py @@ -338,6 +338,8 @@ class BodyPartReader:          assert self._length is not None, \"Content-Length required for chunked read\"          chunk_size = min(size, self._length - self._read_bytes)          chunk = await self._content.read(chunk_size) +        if self._content.at_eof(): +            self._at_eof = True          return chunk        async def _read_chunk_from_stream(self, size: int) -> bytes: ```  This does however introduce some very minor issues with handling form data. So, if possible, it would be recommended to also backport the changes in: https://github.com/aio-libs/aiohttp/commit/cebe526b9c34dc3a3da9140409db63014bc4cf19 https://github.com/aio-libs/aiohttp/commit/7eecdff163ccf029fbb1ddc9de4169d4aaeb6597 https://github.com/aio-libs/aiohttp/commit/f21c6f2ca512a026ce7f0f6c6311f62d6a638866"}, {"id": "GHSA-8495-4g3g-x7pr", "fix_versions": ["3.10.11"], "aliases": ["CVE-2024-52304"], "description": "### Summary The Python parser parses newlines in chunk extensions incorrectly which can lead to request smuggling vulnerabilities under certain conditions.  ### Impact If a pure Python version of aiohttp is installed (i.e. without the usual C extensions) or `AIOHTTP_NO_EXTENSIONS` is enabled, then an attacker may be able to execute a request smuggling attack to bypass certain firewalls or proxy protections.  -----  Patch: https://github.com/aio-libs/aiohttp/commit/259edc369075de63e6f3a4eaade058c62af0df71"}, {"id": "GHSA-9548-qrrj-x5pj", "fix_versions": ["3.12.14"], "aliases": ["CVE-2025-53643"], "description": "### Summary The Python parser is vulnerable to a request smuggling vulnerability due to not parsing trailer sections of an HTTP request.  ### Impact If a pure Python version of aiohttp is installed (i.e. without the usual C extensions) or AIOHTTP_NO_EXTENSIONS is enabled, then an attacker may be able to execute a request smuggling attack to bypass certain firewalls or proxy protections.  ----  Patch: https://github.com/aio-libs/aiohttp/commit/e8d774f635dc6d1cd3174d0e38891da5de0e2b6a"}]}, {"name": "aiosignal", "version": "1.4.0", "vulns": []}, {"name": "amqp", "version": "5.3.1", "vulns": []}, {"name": "annotated-types", "version": "0.7.0", "vulns": []}, {"name": "anyio", "version": "4.10.0", "vulns": []}, {"name": "asgiref", "version": "3.9.1", "vulns": []}, {"name": "attrs", "version": "25.3.0", "vulns": []}, {"name": "authlib", "version": "1.6.1", "vulns": []}, {"name": "autopep8", "version": "2.3.2", "vulns": []}, {"name": "bandit", "version": "1.7.5", "vulns": []}, {"name": "billiard", "version": "4.2.1", "vulns": []}, {"name": "black", "version": "23.12.1", "vulns": [{"id": "PYSEC-2024-48", "fix_versions": ["24.3.0"], "aliases": ["CVE-2024-21503"], "description": "Versions of the package black before 24.3.0 are vulnerable to Regular Expression Denial of Service (ReDoS) via the lines_with_leading_tabs_expanded function in the strings.py file. An attacker could exploit this vulnerability by crafting a malicious input that causes a denial of service.\r\rExploiting this vulnerability is possible when running Black on untrusted input, or if you habitually put thousands of leading tab characters in your docstrings."}]}, {"name": "bleach", "version": "6.1.0", "vulns": []}, {"name": "boolean-py", "version": "5.0", "vulns": []}, {"name": "boto3", "version": "1.39.14", "vulns": []}, {"name": "botocore", "version": "1.39.14", "vulns": []}, {"name": "cachecontrol", "version": "0.14.3", "vulns": []}, {"name": "celery", "version": "5.3.4", "vulns": []}, {"name": "certifi", "version": "2025.7.14", "vulns": []}, {"name": "cffi", "version": "1.17.1", "vulns": []}, {"name": "channels", "version": "4.2.2", "vulns": []}, {"name": "charset-normalizer", "version": "3.4.2", "vulns": []}, {"name": "click", "version": "8.2.1", "vulns": []}, {"name": "click-didyoumean", "version": "0.3.1", "vulns": []}, {"name": "click-plugins", "version": "1.1.1.2", "vulns": []}, {"name": "click-repl", "version": "0.3.0", "vulns": []}, {"name": "colorama", "version": "0.4.6", "vulns": []}, {"name": "coverage", "version": "7.6.9", "vulns": []}, {"name": "cron-descriptor", "version": "1.4.5", "vulns": []}, {"name": "cryptography", "version": "45.0.5", "vulns": []}, {"name": "cyclonedx-python-lib", "version": "9.1.0", "vulns": []}, {"name": "defusedxml", "version": "0.7.1", "vulns": []}, {"name": "dj-database-url", "version": "3.0.1", "vulns": []}, {"name": "django", "version": "5.2.5", "vulns": [{"id": "GHSA-6w2r-r2m5-xq5w", "fix_versions": ["4.2.24", "5.1.12", "5.2.6"], "aliases": ["CVE-2025-57833"], "description": "An issue was discovered in Django 4.2 before 4.2.24, 5.1 before 5.1.12, and 5.2 before 5.2.6. FilteredRelation is subject to SQL injection in column aliases, using a suitably crafted dictionary, with dictionary expansion, as the **kwargs passed QuerySet.annotate() or QuerySet.alias()."}]}, {"name": "django-axes", "version": "6.4.0", "vulns": []}, {"name": "django-celery-beat", "version": "2.8.1", "vulns": []}, {"name": "django-cors-headers", "version": "4.3.1", "vulns": []}, {"name": "django-csp", "version": "3.8", "vulns": []}, {"name": "django-debug-toolbar", "version": "4.2.0", "vulns": []}, {"name": "django-environ", "version": "0.12.0", "vulns": []}, {"name": "django-extensions", "version": "3.2.3", "vulns": []}, {"name": "django-filter", "version": "25.1", "vulns": []}, {"name": "django-postgrespool2", "version": "2.0.5", "vulns": []}, {"name": "django-ratelimit", "version": "4.1.0", "vulns": []}, {"name": "django-redis", "version": "5.4.0", "vulns": []}, {"name": "django-secure", "version": "1.0.2", "vulns": []}, {"name": "django-storages", "version": "1.14.6", "vulns": []}, {"name": "django-templated-mail", "version": "1.1.1", "vulns": []}, {"name": "django-test-plus", "version": "2.2.2", "vulns": []}, {"name": "django-timezone-field", "version": "7.1", "vulns": []}, {"name": "djangorestframework", "version": "3.16.1", "vulns": []}, {"name": "djangorestframework-simplejwt", "version": "5.3.0", "vulns": [{"id": "GHSA-5vcc-86wm-547q", "fix_versions": ["5.5.1"], "aliases": ["CVE-2024-22513"], "description": "djangorestframework-simplejwt before version 5.5.1 is vulnerable to information disclosure. A user can access web application resources even after their account has been disabled due to missing user validation checks via the for_user method."}]}, {"name": "dparse", "version": "0.6.4", "vulns": []}, {"name": "drf-spectacular", "version": "0.27.0", "vulns": []}, {"name": "factory-boy", "version": "3.3.0", "vulns": []}, {"name": "faker", "version": "20.1.0", "vulns": []}, {"name": "filelock", "version": "3.16.1", "vulns": []}, {"name": "flake8", "version": "6.1.0", "vulns": []}, {"name": "frozenlist", "version": "1.7.0", "vulns": []}, {"name": "gitdb", "version": "4.0.12", "vulns": []}, {"name": "gitpython", "version": "3.1.45", "vulns": []}, {"name": "greenlet", "version": "3.2.4", "vulns": []}, {"name": "gunicorn", "version": "23.0.0", "vulns": []}, {"name": "h11", "version": "0.16.0", "vulns": []}, {"name": "http-ece", "version": "1.2.1", "vulns": []}, {"name": "httpcore", "version": "1.0.9", "vulns": []}, {"name": "httpx", "version": "0.28.1", "vulns": []}, {"name": "idna", "version": "3.10", "vulns": []}, {"name": "inflection", "version": "0.5.1", "vulns": []}, {"name": "iniconfig", "version": "2.1.0", "vulns": []}, {"name": "isort", "version": "5.13.2", "vulns": []}, {"name": "jinja2", "version": "3.1.6", "vulns": []}, {"name": "jmespath", "version": "1.0.1", "vulns": []}, {"name": "joblib", "version": "1.5.1", "vulns": []}, {"name": "jsonschema", "version": "4.25.0", "vulns": []}, {"name": "jsonschema-specifications", "version": "2025.4.1", "vulns": []}, {"name": "kombu", "version": "5.5.4", "vulns": []}, {"name": "license-expression", "version": "30.4.4", "vulns": []}, {"name": "markdown-it-py", "version": "3.0.0", "vulns": []}, {"name": "markupsafe", "version": "3.0.2", "vulns": []}, {"name": "marshmallow", "version": "4.0.0", "vulns": []}, {"name": "mccabe", "version": "0.7.0", "vulns": []}, {"name": "mdurl", "version": "0.1.2", "vulns": []}, {"name": "model-bakery", "version": "1.17.0", "vulns": []}, {"name": "msgpack", "version": "1.1.1", "vulns": []}, {"name": "multidict", "version": "6.6.3", "vulns": []}, {"name": "mypy-extensions", "version": "1.1.0", "vulns": []}, {"name": "nltk", "version": "3.9.1", "vulns": []}, {"name": "outcome", "version": "1.3.0.post0", "vulns": []}, {"name": "packageurl-python", "version": "0.17.5", "vulns": []}, {"name": "packaging", "version": "25.0", "vulns": []}, {"name": "pathspec", "version": "0.12.1", "vulns": []}, {"name": "pbr", "version": "6.1.1", "vulns": []}, {"name": "pillow", "version": "11.3.0", "vulns": []}, {"name": "pip", "version": "25.2", "vulns": []}, {"name": "pip-api", "version": "0.0.34", "vulns": []}, {"name": "pip-audit", "version": "2.9.0", "vulns": []}, {"name": "pip-requirements-parser", "version": "32.0.1", "vulns": []}, {"name": "platformdirs", "version": "4.3.8", "vulns": []}, {"name": "pluggy", "version": "1.6.0", "vulns": []}, {"name": "prompt-toolkit", "version": "3.0.51", "vulns": []}, {"name": "propcache", "version": "0.3.2", "vulns": []}, {"name": "psutil", "version": "5.9.6", "vulns": []}, {"name": "psycopg2-binary", "version": "2.9.10", "vulns": []}, {"name": "py-cpuinfo", "version": "9.0.0", "vulns": []}, {"name": "py-serializable", "version": "2.1.0", "vulns": []}, {"name": "py-vapid", "version": "1.9.2", "vulns": []}, {"name": "pycodestyle", "version": "2.11.1", "vulns": []}, {"name": "pycparser", "version": "2.22", "vulns": []}, {"name": "pydantic", "version": "2.9.2", "vulns": []}, {"name": "pydantic-core", "version": "2.23.4", "vulns": []}, {"name": "pyflakes", "version": "3.1.0", "vulns": []}, {"name": "pygments", "version": "2.19.2", "vulns": []}, {"name": "pyjwt", "version": "2.10.1", "vulns": []}, {"name": "pyparsing", "version": "3.2.4", "vulns": []}, {"name": "pysocks", "version": "1.7.1", "vulns": []}, {"name": "pytest", "version": "8.4.1", "vulns": []}, {"name": "pytest-benchmark", "version": "5.1.0", "vulns": []}, {"name": "pytest-cov", "version": "4.1.0", "vulns": []}, {"name": "pytest-django", "version": "4.8.0", "vulns": []}, {"name": "python-crontab", "version": "3.3.0", "vulns": []}, {"name": "python-dateutil", "version": "2.9.0.post0", "vulns": []}, {"name": "python-decouple", "version": "3.8", "vulns": []}, {"name": "python-json-logger", "version": "3.3.0", "vulns": []}, {"name": "pytz", "version": "2025.2", "vulns": []}, {"name": "pywebpush", "version": "2.0.3", "vulns": []}, {"name": "pyyaml", "version": "6.0.2", "vulns": []}, {"name": "redis", "version": "5.0.1", "vulns": []}, {"name": "referencing", "version": "0.36.2", "vulns": []}, {"name": "regex", "version": "2025.7.34", "vulns": []}, {"name": "requests", "version": "2.31.0", "vulns": [{"id": "GHSA-9wx4-h78v-vm56", "fix_versions": ["2.32.0"], "aliases": ["CVE-2024-35195"], "description": "When making requests through a Requests `Session`, if the first request is made with `verify=False` to disable cert verification, all subsequent requests to the same origin will continue to ignore cert verification regardless of changes to the value of `verify`. This behavior will continue for the lifecycle of the connection in the connection pool.  ### Remediation Any of these options can be used to remediate the current issue, we highly recommend upgrading as the preferred mitigation.  * Upgrade to `requests>=2.32.0`. * For `requests<2.32.0`, avoid setting `verify=False` for the first request to a host while using a Requests Session. * For `requests<2.32.0`, call `close()` on `Session` objects to clear existing connections if `verify=False` is used.  ### Related Links * https://github.com/psf/requests/pull/6655"}, {"id": "GHSA-9hjg-9r4m-mvj7", "fix_versions": ["2.32.4"], "aliases": ["CVE-2024-47081"], "description": "### Impact  Due to a URL parsing issue, Requests releases prior to 2.32.4 may leak .netrc credentials to third parties for specific maliciously-crafted URLs.  ### Workarounds For older versions of Requests, use of the .netrc file can be disabled with `trust_env=False` on your Requests Session ([docs](https://requests.readthedocs.io/en/latest/api/#requests.Session.trust_env)).  ### References https://github.com/psf/requests/pull/6965 https://seclists.org/fulldisclosure/2025/Jun/2"}]}, {"name": "rich", "version": "14.1.0", "vulns": []}, {"name": "rpds-py", "version": "0.26.0", "vulns": []}, {"name": "ruamel-yaml", "version": "0.18.14", "vulns": []}, {"name": "ruamel-yaml-clib", "version": "0.2.12", "vulns": []}, {"name": "ruff", "version": "0.12.8", "vulns": []}, {"name": "s3transfer", "version": "0.13.1", "vulns": []}, {"name": "safety", "version": "3.6.0", "vulns": []}, {"name": "safety-schemas", "version": "0.0.14", "vulns": []}, {"name": "selenium", "version": "4.35.0", "vulns": []}, {"name": "sentry-sdk", "version": "2.33.2", "vulns": []}, {"name": "setuptools", "version": "80.9.0", "vulns": []}, {"name": "shellingham", "version": "1.5.4", "vulns": []}, {"name": "six", "version": "1.17.0", "vulns": []}, {"name": "smmap", "version": "5.0.2", "vulns": []}, {"name": "sniffio", "version": "1.3.1", "vulns": []}, {"name": "sorl-thumbnail", "version": "12.10.0", "vulns": []}, {"name": "sortedcontainers", "version": "2.4.0", "vulns": []}, {"name": "sqlalchemy", "version": "2.0.43", "vulns": []}, {"name": "sqlparse", "version": "0.5.3", "vulns": []}, {"name": "stevedore", "version": "5.4.1", "vulns": []}, {"name": "stripe", "version": "11.6.0", "vulns": []}, {"name": "tenacity", "version": "9.1.2", "vulns": []}, {"name": "toml", "version": "0.10.2", "vulns": []}, {"name": "tomlkit", "version": "0.13.3", "vulns": []}, {"name": "tqdm", "version": "4.67.1", "vulns": []}, {"name": "trio", "version": "0.30.0", "vulns": []}, {"name": "trio-websocket", "version": "0.12.2", "vulns": []}, {"name": "typer", "version": "0.16.0", "vulns": []}, {"name": "typing-extensions", "version": "4.14.1", "vulns": []}, {"name": "tzdata", "version": "2025.2", "vulns": []}, {"name": "uritemplate", "version": "4.2.0", "vulns": []}, {"name": "urllib3", "version": "2.5.0", "vulns": []}, {"name": "vine", "version": "5.1.0", "vulns": []}, {"name": "wcwidth", "version": "0.2.13", "vulns": []}, {"name": "webencodings", "version": "0.5.1", "vulns": []}, {"name": "websocket-client", "version": "1.8.0", "vulns": []}, {"name": "whitenoise", "version": "6.9.0", "vulns": []}, {"name": "wsproto", "version": "1.2.0", "vulns": []}, {"name": "yarl", "version": "1.20.1", "vulns": []}], "fixes": []}
