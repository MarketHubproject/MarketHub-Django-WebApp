# Generated by Django 5.2.5 on 2025-08-17 16:10

import django.core.validators
import django.db.models.deletion
import students.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='University',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('domain', models.CharField(max_length=100, unique=True)),
                ('country', models.CharField(max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('verification_required', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Universities',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='StudentProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('university_email', models.EmailField(help_text='Official university email address', max_length=254, unique=True)),
                ('student_id_number', models.CharField(blank=True, help_text='Student ID number from the card', max_length=50)),
                ('expected_graduation_year', models.IntegerField(blank=True, null=True)),
                ('degree_program', models.CharField(blank=True, max_length=200)),
                ('id_image', models.ImageField(blank=True, help_text='Upload your student ID card (JPG, PNG, or PDF, max 10MB)', null=True, upload_to=students.models.student_id_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'pdf'])])),
                ('id_verified', models.CharField(choices=[('pending', 'Pending Upload'), ('uploaded', 'ID Uploaded'), ('processing', 'Processing'), ('verified', 'Verified'), ('rejected', 'Rejected'), ('expired', 'Expired'), ('appealing', 'Under Appeal')], default='pending', max_length=20)),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('rejection_reason', models.TextField(blank=True)),
                ('verification_notes', models.TextField(blank=True, help_text='Internal notes for verification')),
                ('confidence_score', models.FloatField(blank=True, help_text='OCR confidence score (0-1)', null=True)),
                ('extracted_name', models.CharField(blank=True, max_length=200)),
                ('extracted_student_id', models.CharField(blank=True, max_length=50)),
                ('extracted_university', models.CharField(blank=True, max_length=200)),
                ('extracted_expiry_date', models.DateField(blank=True, null=True)),
                ('ocr_raw_data', models.JSONField(blank=True, default=dict)),
                ('id_hash', models.CharField(blank=True, help_text='SHA-256 hash of original image', max_length=64)),
                ('upload_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('upload_user_agent', models.TextField(blank=True)),
                ('id_expires_at', models.DateTimeField(blank=True, help_text='When the student ID expires', null=True)),
                ('verification_expires_at', models.DateTimeField(blank=True, help_text='When verification expires', null=True)),
                ('last_verification_check', models.DateTimeField(auto_now=True)),
                ('email_verified', models.BooleanField(default=False)),
                ('terms_accepted', models.BooleanField(default=False)),
                ('privacy_consent', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student_profile', to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_students', to=settings.AUTH_USER_MODEL)),
                ('university', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='students.university')),
            ],
            options={
                'verbose_name': 'Student Profile',
                'verbose_name_plural': 'Student Profiles',
                'db_table': 'students_studentprofile',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StudentSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_notifications', models.BooleanField(default=True)),
                ('verification_updates', models.BooleanField(default=True)),
                ('marketing_emails', models.BooleanField(default=False)),
                ('public_profile', models.BooleanField(default=False)),
                ('show_university', models.BooleanField(default=True)),
                ('show_graduation_year', models.BooleanField(default=False)),
                ('auto_apply_discounts', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('student_profile', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to='students.studentprofile')),
            ],
            options={
                'verbose_name': 'Student Settings',
                'verbose_name_plural': 'Student Settings',
                'db_table': 'students_studentsettings',
            },
        ),
        migrations.CreateModel(
            name='VerificationAppeal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField(help_text='Reason for the appeal')),
                ('additional_documents', models.FileField(blank=True, null=True, upload_to='appeal_documents/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'pdf'])])),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('under_review', 'Under Review'), ('approved', 'Appeal Approved'), ('denied', 'Appeal Denied'), ('withdrawn', 'Withdrawn')], default='pending', max_length=20)),
                ('review_notes', models.TextField(blank=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('student_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appeals', to='students.studentprofile')),
            ],
            options={
                'verbose_name': 'Verification Appeal',
                'verbose_name_plural': 'Verification Appeals',
                'db_table': 'students_verificationappeal',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='VerificationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('upload', 'ID Uploaded'), ('auto_verify', 'Automatic Verification'), ('manual_review', 'Manual Review'), ('approve', 'Approved'), ('reject', 'Rejected'), ('appeal', 'Appeal Submitted'), ('reupload', 'ID Re-uploaded'), ('expire', 'Verification Expired'), ('delete', 'Data Deleted')], max_length=50)),
                ('result', models.CharField(choices=[('success', 'Success'), ('failure', 'Failure'), ('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('error', 'Error')], max_length=20)),
                ('details', models.JSONField(blank=True, default=dict)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('performed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('student_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='verification_logs', to='students.studentprofile')),
            ],
            options={
                'verbose_name': 'Verification Log',
                'verbose_name_plural': 'Verification Logs',
                'db_table': 'students_verificationlog',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='studentprofile',
            index=models.Index(fields=['id_verified'], name='students_st_id_veri_d0a34a_idx'),
        ),
        migrations.AddIndex(
            model_name='studentprofile',
            index=models.Index(fields=['university_email'], name='students_st_univers_b2c150_idx'),
        ),
        migrations.AddIndex(
            model_name='studentprofile',
            index=models.Index(fields=['created_at'], name='students_st_created_f5606a_idx'),
        ),
        migrations.AddIndex(
            model_name='studentprofile',
            index=models.Index(fields=['verification_expires_at'], name='students_st_verific_8bd1c0_idx'),
        ),
        migrations.AddIndex(
            model_name='verificationlog',
            index=models.Index(fields=['student_profile', 'action'], name='students_ve_student_5f66ee_idx'),
        ),
        migrations.AddIndex(
            model_name='verificationlog',
            index=models.Index(fields=['created_at'], name='students_ve_created_6fd8c5_idx'),
        ),
        migrations.AddIndex(
            model_name='verificationlog',
            index=models.Index(fields=['result'], name='students_ve_result_992f6e_idx'),
        ),
    ]
