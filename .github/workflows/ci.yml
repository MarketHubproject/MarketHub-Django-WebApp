name: MarketHub CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: markethub_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up environment variables
      run: |
        cp .env.example .env
        echo "DEBUG=True" >> .env
        echo "SECRET_KEY=test-secret-key-for-ci" >> .env
        echo "DATABASE_ENGINE=django.db.backends.postgresql" >> .env
        echo "DATABASE_NAME=markethub_test" >> .env
        echo "DATABASE_USER=postgres" >> .env
        echo "DATABASE_PASSWORD=postgres" >> .env
        echo "DATABASE_HOST=localhost" >> .env
        echo "DATABASE_PORT=5432" >> .env

    - name: Run database migrations
      run: |
        python manage.py migrate --settings=markethub.settings.dev

    - name: Run code quality checks
      run: |
        # Linting with flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run security checks
      run: |
        # Security checks with bandit
        bandit -r . -f json -o bandit-report.json || true
        # Safety check for known vulnerabilities
        safety check --json --output safety-report.json || true

    - name: Run tests with coverage
      run: |
        pytest --cov=. \
               --cov-report=html:htmlcov \
               --cov-report=xml:coverage.xml \
               --cov-report=term-missing \
               --cov-fail-under=85 \
               --junitxml=pytest-report.xml \
               -v

    - name: Run performance tests
      run: |
        pytest tests/test_performance.py -v --benchmark-only

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          pytest-report.xml
          htmlcov/
          bandit-report.json
          safety-report.json

    - name: Check coverage threshold
      run: |
        python -c "
        import xml.etree.ElementTree as ET
        tree = ET.parse('coverage.xml')
        root = tree.getroot()
        coverage = float(root.attrib['line-rate']) * 100
        print(f'Coverage: {coverage:.2f}%')
        if coverage < 85:
            print('❌ Coverage below 85% threshold!')
            exit(1)
        else:
            print('✅ Coverage meets 85% threshold!')
        "

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run security scan
      run: |
        python run_security_scan.py --output security_results.json

    - name: Upload security results
      uses: actions/upload-artifact@v3
      with:
        name: security-results
        path: security_results.json

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/markethub:latest
          ${{ secrets.DOCKER_USERNAME }}/markethub:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        # Add your staging deployment commands here
        # This could include:
        # - SSH to staging server
        # - Pull latest code
        # - Run migrations
        # - Restart services
        # - Run smoke tests

    - name: Run staging smoke tests
      run: |
        echo "🧪 Running staging smoke tests..."
        # Add smoke tests for staging environment
        # curl tests, API endpoint validation, etc.

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, security-scan, docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "🚀 Deploying to production environment..."
        # Add your production deployment commands here

    - name: Run production health checks
      run: |
        echo "🔍 Running production health checks..."
        # Add health check commands

  notify:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && needs.security-scan.result == 'success' }}
      run: |
        echo "✅ All tests passed! Coverage maintained at 85%+. Ready for deployment."

    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.security-scan.result == 'failure' }}
      run: |
        echo "❌ Tests failed or security issues detected. Please review and fix."
        exit 1
